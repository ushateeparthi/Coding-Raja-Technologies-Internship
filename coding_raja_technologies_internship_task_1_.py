# -*- coding: utf-8 -*-
"""Coding Raja Technologies Internship Task-1 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YWfE9Se6TxrvaclJDNh9jUksZH1leEaz

First, let's define the main components of the application:

Task Class: To manage individual tasks.
TaskManager Class: To manage the collection of tasks.
Main Application Loop: For user interaction.
"""





import json
from datetime import datetime

class Task:
    def __init__(self, title, priority='low', due_date=None):
        self.title = title
        self.priority = priority
        self.due_date = due_date
        self.completed = False

    def mark_completed(self):
        self.completed = True

    def to_dict(self):
        return {
            'title': self.title,
            'priority': self.priority,
            'due_date': self.due_date,
            'completed': self.completed
        }

    @staticmethod
    def from_dict(data):
        task = Task(data['title'], data['priority'], data['due_date'])
        task.completed = data['completed']
        return task

    def __str__(self):
        return f"{'[x]' if self.completed else '[ ]'} {self.title} (Priority: {self.priority}, Due: {self.due_date})"

class TaskManager:
    def __init__(self, storage_file='tasks.json'):
        self.tasks = []
        self.storage_file = storage_file
        self.load_tasks()

    def add_task(self, title, priority='low', due_date=None):
        task = Task(title, priority, due_date)
        self.tasks.append(task)
        self.save_tasks()

    def remove_task(self, title):
        self.tasks = [task for task in self.tasks if task.title != title]
        self.save_tasks()

    def mark_task_completed(self, title):
        for task in self.tasks:
            if task.title == title:
                task.mark_completed()
                self.save_tasks()
                return True
        return False

    def list_tasks(self):
        return self.tasks

    def save_tasks(self):
        with open(self.storage_file, 'w') as f:
            json.dump([task.to_dict() for task in self.tasks], f, indent=4)

    def load_tasks(self):
        try:
            with open(self.storage_file, 'r') as f:
                tasks_data = json.load(f)
                self.tasks = [Task.from_dict(data) for data in tasks_data]
        except FileNotFoundError:
            self.tasks = []

    def __str__(self):
        return "\n".join(str(task) for task in self.tasks)

def main():
    manager = TaskManager()

    while True:
        print("\nTo-Do List Application")
        print("1. Add Task")
        print("2. Remove Task")
        print("3. Mark Task as Completed")
        print("4. List Tasks")
        print("5. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            title = input("Enter task title: ")
            priority = input("Enter task priority (high, medium, low): ")
            due_date = input("Enter due date (YYYY-MM-DD) or leave blank: ")
            due_date = due_date if due_date else None
            manager.add_task(title, priority, due_date)
        elif choice == '2':
            title = input("Enter task title to remove: ")
            manager.remove_task(title)
        elif choice == '3':
            title = input("Enter task title to mark as completed: ")
            if manager.mark_task_completed(title):
                print("Task marked as completed.")
            else:
                print("Task not found.")
        elif choice == '4':
            print("\nTasks:")
            print(manager)
        elif choice == '5':
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()